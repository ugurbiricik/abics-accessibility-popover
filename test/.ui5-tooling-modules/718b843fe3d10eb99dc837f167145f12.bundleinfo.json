{
  "_entries": [
    {
      "name": "new-npm-package",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\index.js",
      "lastModified": 1751444729502,
      "type": "module",
      "originalName": "index",
      "code": "sap.ui.define(['exports', 'sap/ui/model/json/JSONModel', 'sap/ui/core/Fragment'], (function (exports, JSONModel, Fragment) { 'use strict';\n\n  const popoverModules = [\r\n    {\r\n      id: \"fontSize\",\r\n      icon: \"sap-icon://text-formatting\",\r\n      name: \"Schriftgröße\",\r\n      expandable: true,\r\n      expanded: false,\r\n    },\r\n\r\n    {\r\n      id: \"contrast\",\r\n      icon: \"sap-icon://microphone\",\r\n      name: \"Webseite vorlesen\",\r\n      expandable: true,\r\n      expanded: false,\r\n    },\r\n    {\r\n      id: \"colorBlindness\",\r\n      icon: \"sap-icon://palette\",\r\n      name: \"Farbschwäche\",\r\n      expandable: true,\r\n      expanded: false,\r\n    },\r\n    {\r\n      id: \"blauFilter\",\r\n      icon: \"sap-icon://light-mode\",\r\n      name: \"Blaufilter aktivieren\",\r\n      expandable: true,\r\n      expanded: false,\r\n    },\r\n    {\r\n      id: \"darkMode\",\r\n      icon: \"sap-icon://paint-bucket\",\r\n      name: \"Kontrastmodus\",\r\n      expandable: false,\r\n      expanded: false,\r\n    },\r\n\r\n    {\r\n      id: \"nightMode\",\r\n      icon: \"sap-icon://dark-mode\",\r\n      name: \"Nachtmodus\",\r\n      expandable: false,\r\n      expanded: false,\r\n    },\r\n\r\n    {\r\n      id: \"tabNavigation\",\r\n      icon: \"sap-icon://keyboard-and-mouse\",\r\n      name: \"Tab Navigation\",\r\n      expandable: false,\r\n      expanded: false,\r\n    },\r\n\r\n    {\r\n      id: \"toggleImages\",\r\n      icon: \"sap-icon://picture\",\r\n      name: \"Bilder ausblenden\",\r\n      expandable: false,\r\n      expanded: false,\r\n    },\r\n  ];\n\n  // Bu bayrak, stilin daha önce yüklenip yüklenmediğini kontrol etmek için\r\n  // bu modülün içinde saklanır. Dışarıdan erişilemez.\r\n  let isCustomStyleLoaded = false;\r\n\r\n  /**\r\n   * Uygulamanın <head> bölümüne özel stil dosyasını yalnızca bir kez ekler.\r\n   * Bu fonksiyon, paketin 'package.json' dosyasındaki adını bilir.\r\n   */\r\n  function loadCustomStyleOnce() {\r\n    // Eğer daha önce yüklendiyse, hiçbir şey yapmadan çık.\r\n    if (isCustomStyleLoaded) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // 1. ADIM: Yolu dinamik ve güvenilir bir şekilde al.\r\n      // DİKKAT: \"new-npm-package\" kısmını kendi paket adınızla değiştirmelisiniz.\r\n      // Örnekte \"ui5_bfsg_popover\" kullanmıştınız, o şekilde de olabilir.\r\n      const sCorrectPath = sap.ui.require.toUrl(\"new-npm-package/css/style.css\");\r\n\r\n      // 2. ADIM: Link etiketini oluştur ve ekle\r\n      const link = document.createElement(\"link\");\r\n      link.id = \"new-npm-package-styles\"; // Tekrar kontrol için benzersiz bir ID ata.\r\n      link.rel = \"stylesheet\";\r\n      link.type = \"text/css\";\r\n      link.href = sCorrectPath; // Doğru ve dinamik yolu kullan.\r\n      document.head.appendChild(link);\r\n      \r\n      // 3. ADIM: Bayrağı güncelle ki bir daha yüklenmesin.\r\n      isCustomStyleLoaded = true;\r\n      console.log(\"Custom CSS loaded successfully from:\", sCorrectPath);\r\n    } catch (error) {\r\n        console.error(\"Failed to load custom CSS:\", error);\r\n    }\r\n  }\n\n  // ts/js/fontsize.js (Güncellenmiş ve Modüler Hali)\r\n\r\n  let _defaultFontSize = null; // Orijinal yazı tipi boyutunu saklamak için\r\n\r\n  // Dışarıdan verilecek olan settingsModel'i tutacak referans\r\n  let _settingsModel = null;\r\n\r\n  /**\r\n   * Bu modülü, ayarları tutacak olan JSONModel ile başlatır.\r\n   * @param {sap.ui.model.json.JSONModel} oSettingsModel - {fontStep: 0} gibi veri içeren model.\r\n   */\r\n  const initFontSizer = (oSettingsModel) => {\r\n      // Orijinal yazı tipi boyutunu sadece bir kez al ve sakla\r\n      if (!_defaultFontSize) {\r\n          _defaultFontSize = window.getComputedStyle(document.documentElement).getPropertyValue(\"font-size\");\r\n      }\r\n      _settingsModel = oSettingsModel;\r\n  };\r\n\r\n  /**\r\n   * Yazı tipi boyutunu, modeldeki adıma göre ayarlar.\r\n   */\r\n  const _updateView = () => {\r\n      if (_settingsModel && _defaultFontSize) {\r\n          const step = _settingsModel.getProperty(\"/fontStep\");\r\n          // 'calc' kullanarak orijinal boyuta göre hesaplama yapmak en sağlıklısı.\r\n          // Her adımı 2px olarak ayarlayalım.\r\n          const newSize = `calc(${_defaultFontSize} + ${step * 2}px)`;\r\n          document.documentElement.style.fontSize = newSize;\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Sayaç adımını bir artırır ve görünümü günceller.\r\n   */\r\n  const onIncreaseFontSize = () => {\r\n      if (!_settingsModel) return;\r\n      let currentStep = _settingsModel.getProperty(\"/fontStep\");\r\n      if (currentStep < 5) { // Maksimum artış limiti\r\n          _settingsModel.setProperty(\"/fontStep\", currentStep + 1);\r\n          _updateView();\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Sayaç adımını bir azaltır ve görünümü günceller.\r\n   */\r\n  const onDecreaseFontSize = () => {\r\n      if (!_settingsModel) return;\r\n      let currentStep = _settingsModel.getProperty(\"/fontStep\");\r\n      if (currentStep > -3) { // Maksimum azalış limiti\r\n          _settingsModel.setProperty(\"/fontStep\", currentStep - 1);\r\n          _updateView();\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Yazı tipi boyutunu ve sayacı varsayılan değerlere sıfırlar.\r\n   */\r\n  const onResetFontSize = () => {\r\n      if (!_settingsModel) return;\r\n      _settingsModel.setProperty(\"/fontStep\", 0);\r\n      // Orijinal boyutu geri yükle\r\n      document.documentElement.style.fontSize = _defaultFontSize;\r\n  };\n\n  let synth = window.speechSynthesis;\r\n  let utterance = null;\r\n  let isReading = false;\r\n  let settingsModel = null;\r\n\r\n  const initTextToSpeech = (oSettingsModel) => {\r\n      settingsModel = oSettingsModel;\r\n  };\r\n\r\n  const startReading = () => {\r\n      if (isReading) return;\r\n      stopReading();\r\n      const text = document.body.innerText;\r\n      utterance = new SpeechSynthesisUtterance(text);\r\n      utterance.rate = settingsModel?.getProperty(\"/ttsRate\") || 1;\r\n      utterance.volume = settingsModel?.getProperty(\"/ttsVolume\") || 1;\r\n      synth.speak(utterance);\r\n      isReading = true;\r\n      utterance.onend = () => { isReading = false; };\r\n  };\r\n\r\n  const stopReading = () => {\r\n      if (synth.speaking) synth.cancel();\r\n      isReading = false;\r\n  };\r\n\r\n  const setTTSRate = (rate) => {\r\n      settingsModel?.setProperty(\"/ttsRate\", rate);\r\n  };\r\n\r\n  const setTTSVolume = (volume) => {\r\n      settingsModel?.setProperty(\"/ttsVolume\", volume);\r\n  };\r\n\r\n  let hoverActive = false;\r\n  function hoverHandler(e) {\r\n      if (e.target && e.target.innerText) {\r\n          stopReading();\r\n          utterance = new SpeechSynthesisUtterance(e.target.innerText);\r\n          utterance.rate = settingsModel?.getProperty(\"/ttsRate\") || 1;\r\n          utterance.volume = settingsModel?.getProperty(\"/ttsVolume\") || 1;\r\n          synth.speak(utterance);\r\n      }\r\n  }\r\n\r\n  const enableHoverRead = () => {\r\n      if (!hoverActive) {\r\n          document.body.addEventListener(\"mouseover\", hoverHandler);\r\n          hoverActive = true;\r\n      }\r\n  };\r\n\r\n  const disableHoverRead = () => {\r\n      if (hoverActive) {\r\n          document.body.removeEventListener(\"mouseover\", hoverHandler);\r\n          hoverActive = false;\r\n      }\r\n  };\n\n  const FILTERS = {\r\n      none: '',\r\n      protanopia: 'url(#protanopia)',\r\n      deuteranopia: 'url(#deuteranopia)',\r\n      tritanopia: 'url(#tritanopia)',\r\n      achromatopsia: 'grayscale(1)'\r\n  };\r\n\r\n  // SVG filtreleri ekle (protanopia, deuteranopia, tritanopia için)\r\n  function injectSVGFilters() {\r\n      if (document.getElementById('color-blindness-filters')) return;\r\n      const svgNS = 'http://www.w3.org/2000/svg';\r\n      const svg = document.createElementNS(svgNS, 'svg');\r\n      svg.setAttribute('id', 'color-blindness-filters');\r\n      svg.setAttribute('style', 'position:absolute;width:0;height:0;');\r\n      svg.innerHTML = `\r\n      <filter id=\"protanopia\">\r\n        <feColorMatrix type=\"matrix\" values=\"0.567 0.433 0 0 0 0.558 0.442 0 0 0 0 0.242 0.758 0 0 0 0 0 1 0\"/>\r\n      </filter>\r\n      <filter id=\"deuteranopia\">\r\n        <feColorMatrix type=\"matrix\" values=\"0.625 0.375 0 0 0 0.7 0.3 0 0 0 0 0.3 0.7 0 0 0 0 0 1 0\"/>\r\n      </filter>\r\n      <filter id=\"tritanopia\">\r\n        <feColorMatrix type=\"matrix\" values=\"0.95 0.05 0 0 0 0 0.433 0.567 0 0 0 0.475 0.525 0 0 0 0 0 1 0\"/>\r\n      </filter>\r\n    `;\r\n      document.body.appendChild(svg);\r\n  }\r\n\r\n  const applyColorBlindness = (type) => {\r\n      injectSVGFilters();\r\n      const filter = FILTERS[type] || '';\r\n      document.documentElement.style.filter = filter;\r\n  };\r\n\r\n  const resetColorBlindness = () => {\r\n      document.documentElement.style.filter = '';\r\n  };\n\n  function getFilter(level) {\r\n      // level: 0-100\r\n      const sepia = (level / 100) * 0.6; // max 0.6 sepia\r\n      const hue = -20 * (level / 100);   // max -20deg\r\n      const brightness = 1 - (level / 100) * 0.1; // min 0.9\r\n      return `brightness(${brightness}) sepia(${sepia}) hue-rotate(${hue}deg)`;\r\n  }\r\n\r\n  const enableBlueLightFilter = (level = 50) => {\r\n      document.documentElement.style.filter = getFilter(level);\r\n  };\r\n\r\n  const disableBlueLightFilter = () => {\r\n      document.documentElement.style.filter = '';\r\n  };\n\n  // ts/index.js (Modüler Yapıyı Koruyan Nihai Hali)\r\n\r\n\r\n  const oSettingsModel = new JSONModel({\r\n      fontStep: 0,\r\n      ttsRate: 1,\r\n      ttsVolume: 1,\r\n      ttsHover: false,\r\n      colorBlindnessType: 'none',\r\n      blueLightFilterLevel: 50,\r\n      blueLightFilterActive: false,\r\n      fontSizeExpanded: false,\r\n      ttsExpanded: false,\r\n      colorBlindnessExpanded: false,\r\n      blaufilterExpanded: false\r\n  });\r\n\r\n  const openPopover = async (controller, oEvent) => {\r\n      const oView = controller.getView();\r\n      const sFragmentId = oView.getId();\r\n\r\n      if (!controller._pPopover) {\r\n          loadCustomStyleOnce();\r\n          initFontSizer(oSettingsModel);\r\n          initTextToSpeech(oSettingsModel);\r\n\r\n          controller._pPopover = Fragment.load({\r\n              id: sFragmentId,\r\n              name: \"new-npm-package.Popover\",\r\n              controller: controller\r\n          }).then((oPopover) => {\r\n              oView.addDependent(oPopover);\r\n\r\n              oPopover.setModel(oSettingsModel, \"settings\");\r\n\r\n              const closeButton = Fragment.byId(sFragmentId, \"closePopoverButton\");\r\n              const increaseButton = Fragment.byId(sFragmentId, \"increaseFontButton\");\r\n              const decreaseButton = Fragment.byId(sFragmentId, \"decreaseFontButton\");\r\n              const resetButton = Fragment.byId(sFragmentId, \"resetFontButton\");\r\n\r\n              closeButton?.attachPress(() => oPopover.close());\r\n              increaseButton?.attachPress(onIncreaseFontSize);\r\n              decreaseButton?.attachPress(onDecreaseFontSize);\r\n              resetButton?.attachPress(onResetFontSize);\r\n\r\n              // TTS Kontrolleri\r\n              const ttsStartButton = Fragment.byId(sFragmentId, \"ttsStartButton\");\r\n              const ttsStopButton = Fragment.byId(sFragmentId, \"ttsStopButton\");\r\n              const ttsRateSlider = Fragment.byId(sFragmentId, \"ttsRateSlider\");\r\n              const ttsVolumeSlider = Fragment.byId(sFragmentId, \"ttsVolumeSlider\");\r\n              const ttsHoverSwitch = Fragment.byId(sFragmentId, \"ttsHoverSwitch\");\r\n\r\n              ttsStartButton?.attachPress(startReading);\r\n              ttsStopButton?.attachPress(stopReading);\r\n              ttsRateSlider?.attachChange((e) => setTTSRate(e.getParameter(\"value\")));\r\n              ttsVolumeSlider?.attachChange((e) => setTTSVolume(e.getParameter(\"value\")));\r\n              ttsHoverSwitch?.attachChange((e) => {\r\n                  const active = e.getParameter(\"state\");\r\n                  oSettingsModel.setProperty(\"/ttsHover\", active);\r\n                  if (active) enableHoverRead(); else disableHoverRead();\r\n              });\r\n\r\n              // Color Blindness Kontrolleri\r\n              const colorBlindnessSelect = Fragment.byId(sFragmentId, \"colorBlindnessSelect\");\r\n              const colorBlindnessResetButton = Fragment.byId(sFragmentId, \"colorBlindnessResetButton\");\r\n              colorBlindnessSelect?.attachChange((e) => {\r\n                  const type = e.getParameter(\"selectedItem\").getKey();\r\n                  oSettingsModel.setProperty(\"/colorBlindnessType\", type);\r\n                  applyColorBlindness(type);\r\n              });\r\n              colorBlindnessResetButton?.attachPress(() => {\r\n                  oSettingsModel.setProperty(\"/colorBlindnessType\", \"none\");\r\n                  resetColorBlindness();\r\n              });\r\n\r\n              // Blue Light Filter Kontrolleri\r\n              const blueLightFilterSlider = Fragment.byId(sFragmentId, \"blueLightFilterSlider\");\r\n              const blueLightFilterResetButton = Fragment.byId(sFragmentId, \"blueLightFilterResetButton\");\r\n              blueLightFilterSlider?.attachChange((e) => {\r\n                  const level = e.getParameter(\"value\");\r\n                  oSettingsModel.setProperty(\"/blueLightFilterLevel\", level);\r\n                  enableBlueLightFilter(level);\r\n              });\r\n              blueLightFilterResetButton?.attachPress(() => {\r\n                  oSettingsModel.setProperty(\"/blueLightFilterLevel\", 0);\r\n                  disableBlueLightFilter();\r\n              });\r\n\r\n              // Blue Light Filter Header Butonu\r\n              const blueLightFilterHeaderButton = Fragment.byId(sFragmentId, \"blueLightFilterHeaderButton\");\r\n              blueLightFilterHeaderButton?.attachPress(() => {\r\n                  const active = oSettingsModel.getProperty(\"/blueLightFilterActive\");\r\n                  if (!active) {\r\n                      enableBlueLightFilter(oSettingsModel.getProperty(\"/blueLightFilterLevel\"));\r\n                  } else {\r\n                      disableBlueLightFilter();\r\n                  }\r\n                  oSettingsModel.setProperty(\"/blueLightFilterActive\", !active);\r\n              });\r\n\r\n              // Panel headerToolbar press fonksiyonları (örnekteki gibi panel id'siyle toggle)\r\n              oPopover.onFontSizeToolbarPress = function() {\r\n                  var oPanel = oPopover.byId(\"fontSizePanel\");\r\n                  oPanel.setExpanded(!oPanel.getExpanded());\r\n              };\r\n              oPopover.onTTSToolbarPress = function() {\r\n                  var oPanel = oPopover.byId(\"ttsPanel\");\r\n                  oPanel.setExpanded(!oPanel.getExpanded());\r\n              };\r\n              oPopover.onColorBlindnessToolbarPress = function() {\r\n                  var oPanel = oPopover.byId(\"colorBlindnessPanel\");\r\n                  oPanel.setExpanded(!oPanel.getExpanded());\r\n              };\r\n              oPopover.onBlaufilterToolbarPress = function() {\r\n                  var oPanel = oPopover.byId(\"blaufilterPanel\");\r\n                  var expanded = oPanel.getExpanded();\r\n                  oPanel.setExpanded(!expanded);\r\n                  if (!expanded) {\r\n                      // Panel açılıyor\r\n                      enableBlueLightFilter(oSettingsModel.getProperty(\"/blueLightFilterLevel\"));\r\n                      oSettingsModel.setProperty(\"/blueLightFilterActive\", true);\r\n                  } else {\r\n                      // Panel kapanıyor\r\n                      disableBlueLightFilter();\r\n                      oSettingsModel.setProperty(\"/blueLightFilterActive\", false);\r\n                  }\r\n              };\r\n\r\n              // Panel header'ına tıklanınca paneli aç/kapat ve filtreyi tetikle\r\n              oPopover.onPanelHeaderPress = function(oEvent) {\r\n                  const context = oEvent.getSource().getBindingContext(\"modules\");\r\n                  if (context) {\r\n                      const name = context.getProperty(\"name\");\r\n                      const expanded = context.getProperty(\"expanded\");\r\n                      // Tüm modüller için expanded toggle\r\n                      context.getModel().setProperty(context.getPath() + \"/expanded\", !expanded);\r\n                      // Sadece Blaufilter aktivieren için filtreyi tetikle\r\n                      if (name === \"Blaufilter aktivieren\") {\r\n                          if (!expanded) {\r\n                              // Panel açılıyor\r\n                              const level = oSettingsModel.getProperty(\"/blueLightFilterLevel\");\r\n                              enableBlueLightFilter(level);\r\n                          } else {\r\n                              // Panel kapanıyor\r\n                              disableBlueLightFilter();\r\n                          }\r\n                      }\r\n                  }\r\n              };\r\n\r\n              return oPopover;\r\n          });\r\n      }\r\n\r\n      const oPopover = await controller._pPopover;\r\n\r\n      oPopover.setModel(new JSONModel({ items: popoverModules }), \"modules\");\r\n      oPopover.openBy(oEvent.getSource());\r\n  };\n\n  const __esModule = true ;\n\n  exports.__esModule = __esModule;\n  exports.openPopover = openPopover;\n\n}));\n",
      "relatedPaths": [
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\popoverModules.js",
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\js\\cssLoader.js",
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\js\\fontsize.js",
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\js\\textToSpeech.js",
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\js\\colorBlindness.js",
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\js\\blueLightFilter.js",
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\index.js"
      ],
      "imports": [
        "sap/ui/model/json/JSONModel",
        "sap/ui/core/Fragment"
      ],
      "dynamicImports": [],
      "generated": false,
      "isWebComponent": false,
      "isEntryPoint": true
    },
    {
      "name": "new-npm-package/css/style.css",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\css\\style.css",
      "code": "/* Sadece bizim özel popover'ımızı hedef al */\r\n@import \"./fontsize.css\";\r\n\r\n.popoverModulesPanel.sapMPanel {\r\n    border: 0;\r\n    border-radius: 0;\r\n}\r\n\r\n.popoverModulesPanel .sapMListShowSeparatorsNone .sapMLIBShowSeparator{\r\n    border-bottom: 0\r\n}\r\n\r\n.popoverModulesPanel .sapMPanelWrappingDivTb{\r\n    border-radius: 0 !important;\r\n}\r\n\r\nbody.eye-able-images-hidden img,\r\nbody.eye-able-images-hidden .sapMImg {\r\n  display: none !important;\r\n}\r\n",
      "type": "resource"
    },
    {
      "name": "new-npm-package/Popover.fragment.xml",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\Popover.fragment.xml",
      "code": "<core:FragmentDefinition\r\n    xmlns=\"sap.m\"\r\n    xmlns:core=\"sap.ui.core\"\r\n>\r\n    <Popover\r\n        class=\"myCustomPopover\"\r\n        id=\"npmPopover\"\r\n        placement=\"Bottom\"\r\n        title=\"Eye Able Assistent\"\r\n        contentWidth=\"300px\"\r\n    >\r\n        <content>\r\n            <core:Fragment\r\n                fragmentName=\"new-npm-package.FontSizePanel\"\r\n                type=\"XML\"\r\n            />\r\n            <core:Fragment\r\n                fragmentName=\"new-npm-package.TTSSpeechPanel\"\r\n                type=\"XML\"\r\n            />\r\n            <core:Fragment\r\n                fragmentName=\"new-npm-package.ColorBlindnessPanel\"\r\n                type=\"XML\"\r\n            />\r\n            <core:Fragment\r\n                fragmentName=\"new-npm-package.BlaufilterPanel\"\r\n                type=\"XML\"\r\n            />\r\n        </content>\r\n        <footer>\r\n            <Toolbar>\r\n                <ToolbarSpacer />\r\n                <Button\r\n                    id=\"closePopoverButton\"\r\n                    text=\"Schließen\"\r\n                />\r\n            </Toolbar>\r\n        </footer>\r\n    </Popover>\r\n</core:FragmentDefinition>\r\n",
      "type": "resource"
    },
    {
      "name": "new-npm-package/FontSizePanel.fragment.xml",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\FontSizePanel.fragment.xml",
      "code": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\r\n   <Panel id=\"fontSizePanel\" expandable=\"true\" expanded=\"{settings>/fontSizeExpanded}\" width=\"auto\">\r\n      <headerToolbar>\r\n         <OverflowToolbar active=\"true\" press=\"onFontSizeToolbarPress\">\r\n            <Title text=\"Schriftgröße\" />\r\n         </OverflowToolbar>\r\n      </headerToolbar>\r\n      <content>\r\n         <VBox justifyContent=\"Center\" alignItems=\"Center\" width=\"100%\">\r\n            <Button id=\"fontStepInput\" text=\"{settings>/fontStep}\" width=\"150px\" />\r\n            <HBox alignItems=\"Center\" width=\"150px\" justifyContent=\"SpaceBetween\">\r\n               <Button id=\"decreaseFontButton\" icon=\"sap-icon://less\" />\r\n               <Button id=\"resetFontButton\" icon=\"sap-icon://refresh\" />\r\n               <Button id=\"increaseFontButton\" icon=\"sap-icon://add\" />\r\n            </HBox>\r\n         </VBox>\r\n      </content>\r\n   </Panel>\r\n</core:FragmentDefinition> ",
      "type": "resource"
    },
    {
      "name": "new-npm-package/TTSSpeechPanel.fragment.xml",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\TTSSpeechPanel.fragment.xml",
      "code": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\r\n   <Panel id=\"ttsPanel\" expandable=\"true\" expanded=\"{settings>/ttsExpanded}\" width=\"auto\">\r\n      <headerToolbar>\r\n         <OverflowToolbar active=\"true\" press=\"onTTSToolbarPress\">\r\n            <Title text=\"Webseite vorlesen\" />\r\n         </OverflowToolbar>\r\n      </headerToolbar>\r\n      <content>\r\n         <VBox justifyContent=\"Center\" alignItems=\"Center\" width=\"100%\">\r\n            <HBox alignItems=\"Center\" width=\"200px\" justifyContent=\"SpaceBetween\">\r\n               <Button id=\"ttsStartButton\" text=\"Vorlesen\" icon=\"sap-icon://begin\"/>\r\n               <Button id=\"ttsStopButton\" text=\"Stopp\" icon=\"sap-icon://stop\"/>\r\n            </HBox>\r\n            <HBox alignItems=\"Center\" width=\"200px\" justifyContent=\"SpaceBetween\">\r\n               <Label text=\"Geschwindigkeit\" labelFor=\"ttsRateSlider\"/>\r\n               <Slider id=\"ttsRateSlider\" min=\"0.5\" max=\"2\" step=\"0.1\" value=\"{settings>/ttsRate}\" width=\"100px\"/>\r\n            </HBox>\r\n            <HBox alignItems=\"Center\" width=\"200px\" justifyContent=\"SpaceBetween\">\r\n               <Label text=\"Lautstärke\" labelFor=\"ttsVolumeSlider\"/>\r\n               <Slider id=\"ttsVolumeSlider\" min=\"0\" max=\"1\" step=\"0.1\" value=\"{settings>/ttsVolume}\" width=\"100px\"/>\r\n            </HBox>\r\n            <HBox alignItems=\"Center\" width=\"200px\" justifyContent=\"SpaceBetween\">\r\n               <Label text=\"Hover-Lesen\" labelFor=\"ttsHoverSwitch\"/>\r\n               <Switch id=\"ttsHoverSwitch\" state=\"{settings>/ttsHover}\"/>\r\n            </HBox>\r\n         </VBox>\r\n      </content>\r\n   </Panel>\r\n</core:FragmentDefinition> ",
      "type": "resource"
    },
    {
      "name": "new-npm-package/ColorBlindnessPanel.fragment.xml",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\ColorBlindnessPanel.fragment.xml",
      "code": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\r\n   <Panel id=\"colorBlindnessPanel\" expandable=\"true\" expanded=\"{settings>/colorBlindnessExpanded}\" width=\"auto\">\r\n      <headerToolbar>\r\n         <OverflowToolbar active=\"true\" press=\"onColorBlindnessToolbarPress\">\r\n            <Title text=\"Farbschwäche\" />\r\n         </OverflowToolbar>\r\n      </headerToolbar>\r\n      <content>\r\n         <VBox justifyContent=\"Center\" alignItems=\"Center\" width=\"100%\">\r\n            <HBox alignItems=\"Center\" width=\"200px\" justifyContent=\"SpaceBetween\">\r\n               <Label text=\"Typ\" labelFor=\"colorBlindnessSelect\"/>\r\n               <Select id=\"colorBlindnessSelect\" selectedKey=\"{settings>/colorBlindnessType}\">\r\n                  <items>\r\n                     <core:Item key=\"none\" text=\"Keine\" />\r\n                     <core:Item key=\"protanopia\" text=\"Protanopie\" />\r\n                     <core:Item key=\"deuteranopia\" text=\"Deuteranopie\" />\r\n                     <core:Item key=\"tritanopia\" text=\"Tritanopie\" />\r\n                     <core:Item key=\"achromatopsia\" text=\"Achromatopsie\" />\r\n                  </items>\r\n               </Select>\r\n            </HBox>\r\n            <HBox alignItems=\"Center\" width=\"200px\" justifyContent=\"End\">\r\n               <Button id=\"colorBlindnessResetButton\" text=\"Zurücksetzen\" icon=\"sap-icon://refresh\"/>\r\n            </HBox>\r\n         </VBox>\r\n      </content>\r\n   </Panel>\r\n</core:FragmentDefinition> ",
      "type": "resource"
    },
    {
      "name": "new-npm-package/BlaufilterPanel.fragment.xml",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\BlaufilterPanel.fragment.xml",
      "code": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\r\n   <Panel id=\"blaufilterPanel\" expandable=\"true\" expanded=\"{settings>/blaufilterExpanded}\" width=\"auto\">\r\n      <headerToolbar>\r\n         <OverflowToolbar active=\"true\" press=\"onBlaufilterToolbarPress\">\r\n            <Title text=\"{= ${settings>/blaufilterExpanded} ? 'Deaktivieren' : 'Aktivieren'}\" />\r\n         </OverflowToolbar>\r\n      </headerToolbar>\r\n      <content>\r\n         <VBox justifyContent=\"Center\" alignItems=\"Center\" width=\"100%\">\r\n            <HBox alignItems=\"Center\" width=\"200px\" justifyContent=\"SpaceBetween\">\r\n               <Label text=\"Blaufilter Level\" labelFor=\"blueLightFilterSlider\"/>\r\n               <Slider id=\"blueLightFilterSlider\" min=\"0\" max=\"100\" step=\"1\" value=\"{settings>/blueLightFilterLevel}\" width=\"100px\"/>\r\n            </HBox>\r\n            <HBox alignItems=\"Center\" width=\"200px\" justifyContent=\"End\">\r\n               <Button id=\"blueLightFilterResetButton\" text=\"Zurücksetzen\" icon=\"sap-icon://refresh\"/>\r\n            </HBox>\r\n         </VBox>\r\n      </content>\r\n   </Panel>\r\n</core:FragmentDefinition> ",
      "type": "resource"
    }
  ]
}