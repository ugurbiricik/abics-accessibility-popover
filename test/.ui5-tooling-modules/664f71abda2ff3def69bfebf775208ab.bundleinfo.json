{
  "_entries": [
    {
      "name": "new-npm-package",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\index.js",
      "lastModified": 1751529918313,
      "type": "module",
      "originalName": "index",
      "code": "sap.ui.define(['exports', 'sap/ui/model/json/JSONModel', 'sap/ui/core/Fragment'], (function (exports, JSONModel, Fragment) { 'use strict';\n\n  const popoverModules = [\r\n    {\r\n      id: \"fontSize\",\r\n      icon: \"sap-icon://text-formatting\",\r\n      name: \"Schriftgröße\",\r\n      expandable: true,\r\n      expanded: false,\r\n    },\r\n\r\n    {\r\n      id: \"contrast\",\r\n      icon: \"sap-icon://microphone\",\r\n      name: \"Webseite vorlesen\",\r\n      expandable: true,\r\n      expanded: false,\r\n    },\r\n    {\r\n      id: \"colorBlindness\",\r\n      icon: \"sap-icon://palette\",\r\n      name: \"Farbschwäche\",\r\n      expandable: true,\r\n      expanded: false,\r\n    },\r\n    {\r\n      id: \"blauFilter\",\r\n      icon: \"sap-icon://light-mode\",\r\n      name: \"Blaufilter aktivieren\",\r\n      expandable: true,\r\n      expanded: false,\r\n    },\r\n    {\r\n      id: \"darkMode\",\r\n      icon: \"sap-icon://paint-bucket\",\r\n      name: \"Kontrastmodus\",\r\n      expandable: false,\r\n      expanded: false,\r\n    },\r\n\r\n    {\r\n      id: \"nightMode\",\r\n      icon: \"sap-icon://dark-mode\",\r\n      name: \"Nachtmodus\",\r\n      expandable: false,\r\n      expanded: false,\r\n    },\r\n\r\n    {\r\n      id: \"tabNavigation\",\r\n      icon: \"sap-icon://keyboard-and-mouse\",\r\n      name: \"Tab Navigation\",\r\n      expandable: false,\r\n      expanded: false,\r\n    },\r\n\r\n    {\r\n      id: \"toggleImages\",\r\n      icon: \"sap-icon://picture\",\r\n      name: \"Bilder ausblenden\",\r\n      expandable: false,\r\n      expanded: false,\r\n    },\r\n  ];\n\n  // Bu bayrak, stilin daha önce yüklenip yüklenmediğini kontrol etmek için\r\n  // bu modülün içinde saklanır. Dışarıdan erişilemez.\r\n  let isCustomStyleLoaded = false;\r\n\r\n  /**\r\n   * Uygulamanın <head> bölümüne özel stil dosyasını yalnızca bir kez ekler.\r\n   * Bu fonksiyon, paketin 'package.json' dosyasındaki adını bilir.\r\n   */\r\n  function loadCustomStyleOnce() {\r\n    // Eğer daha önce yüklendiyse, hiçbir şey yapmadan çık.\r\n    if (isCustomStyleLoaded) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // 1. ADIM: Yolu dinamik ve güvenilir bir şekilde al.\r\n      // DİKKAT: \"new-npm-package\" kısmını kendi paket adınızla değiştirmelisiniz.\r\n      // Örnekte \"ui5_bfsg_popover\" kullanmıştınız, o şekilde de olabilir.\r\n      const sCorrectPath = sap.ui.require.toUrl(\"new-npm-package/css/style.css\");\r\n\r\n      // 2. ADIM: Link etiketini oluştur ve ekle\r\n      const link = document.createElement(\"link\");\r\n      link.id = \"new-npm-package-styles\"; // Tekrar kontrol için benzersiz bir ID ata.\r\n      link.rel = \"stylesheet\";\r\n      link.type = \"text/css\";\r\n      link.href = sCorrectPath; // Doğru ve dinamik yolu kullan.\r\n      document.head.appendChild(link);\r\n      \r\n      // 3. ADIM: Bayrağı güncelle ki bir daha yüklenmesin.\r\n      isCustomStyleLoaded = true;\r\n      console.log(\"Custom CSS loaded successfully from:\", sCorrectPath);\r\n    } catch (error) {\r\n        console.error(\"Failed to load custom CSS:\", error);\r\n    }\r\n  }\n\n  // ts/js/fontsize.js (Güncellenmiş ve Modüler Hali)\r\n\r\n  let _defaultFontSize = null; // Orijinal yazı tipi boyutunu saklamak için\r\n\r\n  // Dışarıdan verilecek olan settingsModel'i tutacak referans\r\n  let _settingsModel = null;\r\n\r\n  /**\r\n   * Bu modülü, ayarları tutacak olan JSONModel ile başlatır.\r\n   * @param {sap.ui.model.json.JSONModel} oSettingsModel - {fontStep: 0} gibi veri içeren model.\r\n   */\r\n  const initFontSizer = (oSettingsModel) => {\r\n      // Orijinal yazı tipi boyutunu sadece bir kez al ve sakla\r\n      if (!_defaultFontSize) {\r\n          _defaultFontSize = window.getComputedStyle(document.documentElement).getPropertyValue(\"font-size\");\r\n      }\r\n      _settingsModel = oSettingsModel;\r\n  };\r\n\r\n  /**\r\n   * Yazı tipi boyutunu, modeldeki adıma göre ayarlar.\r\n   */\r\n  const _updateView = () => {\r\n      if (_settingsModel && _defaultFontSize) {\r\n          const step = _settingsModel.getProperty(\"/fontStep\");\r\n          // 'calc' kullanarak orijinal boyuta göre hesaplama yapmak en sağlıklısı.\r\n          // Her adımı 2px olarak ayarlayalım.\r\n          const newSize = `calc(${_defaultFontSize} + ${step * 2}px)`;\r\n          document.documentElement.style.fontSize = newSize;\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Sayaç adımını bir artırır ve görünümü günceller.\r\n   */\r\n  const onIncreaseFontSize = () => {\r\n      if (!_settingsModel) return;\r\n      let currentStep = _settingsModel.getProperty(\"/fontStep\");\r\n      if (currentStep < 5) { // Maksimum artış limiti\r\n          _settingsModel.setProperty(\"/fontStep\", currentStep + 1);\r\n          _updateView();\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Sayaç adımını bir azaltır ve görünümü günceller.\r\n   */\r\n  const onDecreaseFontSize = () => {\r\n      if (!_settingsModel) return;\r\n      let currentStep = _settingsModel.getProperty(\"/fontStep\");\r\n      if (currentStep > -3) { // Maksimum azalış limiti\r\n          _settingsModel.setProperty(\"/fontStep\", currentStep - 1);\r\n          _updateView();\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Yazı tipi boyutunu ve sayacı varsayılan değerlere sıfırlar.\r\n   */\r\n  const onResetFontSize = () => {\r\n      if (!_settingsModel) return;\r\n      _settingsModel.setProperty(\"/fontStep\", 0);\r\n      // Orijinal boyutu geri yükle\r\n      document.documentElement.style.fontSize = _defaultFontSize;\r\n  };\n\n  let synth = window.speechSynthesis;\r\n  let utterance = null;\r\n  let isReading = false;\r\n  let settingsModel = null;\r\n\r\n  const initTextToSpeech = (oSettingsModel) => {\r\n      settingsModel = oSettingsModel;\r\n  };\r\n\r\n  const startReading = () => {\r\n      if (isReading) return;\r\n      stopReading();\r\n      const text = document.body.innerText;\r\n      utterance = new SpeechSynthesisUtterance(text);\r\n      utterance.rate = settingsModel?.getProperty(\"/ttsRate\") || 1;\r\n      utterance.volume = settingsModel?.getProperty(\"/ttsVolume\") || 1;\r\n      synth.speak(utterance);\r\n      isReading = true;\r\n      utterance.onend = () => { isReading = false; };\r\n  };\r\n\r\n  const stopReading = () => {\r\n      if (synth.speaking) synth.cancel();\r\n      isReading = false;\r\n  };\r\n\r\n  const setTTSRate = (rate) => {\r\n      settingsModel?.setProperty(\"/ttsRate\", rate);\r\n  };\r\n\r\n  const setTTSVolume = (volume) => {\r\n      settingsModel?.setProperty(\"/ttsVolume\", volume);\r\n  };\r\n\r\n  let hoverActive = false;\r\n  function hoverHandler(e) {\r\n      if (e.target && e.target.innerText) {\r\n          stopReading();\r\n          utterance = new SpeechSynthesisUtterance(e.target.innerText);\r\n          utterance.rate = settingsModel?.getProperty(\"/ttsRate\") || 1;\r\n          utterance.volume = settingsModel?.getProperty(\"/ttsVolume\") || 1;\r\n          synth.speak(utterance);\r\n      }\r\n  }\r\n\r\n  const enableHoverRead = () => {\r\n      if (!hoverActive) {\r\n          document.body.addEventListener(\"mouseover\", hoverHandler);\r\n          hoverActive = true;\r\n      }\r\n  };\r\n\r\n  const disableHoverRead = () => {\r\n      if (hoverActive) {\r\n          document.body.removeEventListener(\"mouseover\", hoverHandler);\r\n          hoverActive = false;\r\n      }\r\n  };\n\n  const FILTERS = {\r\n      none: '',\r\n      protanopia: 'url(#protanopia)',\r\n      deuteranopia: 'url(#deuteranopia)',\r\n      tritanopia: 'url(#tritanopia)',\r\n      achromatopsia: 'grayscale(1)'\r\n  };\r\n\r\n  // SVG filtreleri ekle (protanopia, deuteranopia, tritanopia için)\r\n  function injectSVGFilters() {\r\n      if (document.getElementById('color-blindness-filters')) return;\r\n      const svgNS = 'http://www.w3.org/2000/svg';\r\n      const svg = document.createElementNS(svgNS, 'svg');\r\n      svg.setAttribute('id', 'color-blindness-filters');\r\n      svg.setAttribute('style', 'position:absolute;width:0;height:0;');\r\n      svg.innerHTML = `\r\n      <filter id=\"protanopia\">\r\n        <feColorMatrix type=\"matrix\" values=\"0.567 0.433 0 0 0 0.558 0.442 0 0 0 0 0.242 0.758 0 0 0 0 0 1 0\"/>\r\n      </filter>\r\n      <filter id=\"deuteranopia\">\r\n        <feColorMatrix type=\"matrix\" values=\"0.625 0.375 0 0 0 0.7 0.3 0 0 0 0 0.3 0.7 0 0 0 0 0 1 0\"/>\r\n      </filter>\r\n      <filter id=\"tritanopia\">\r\n        <feColorMatrix type=\"matrix\" values=\"0.95 0.05 0 0 0 0 0.433 0.567 0 0 0 0.475 0.525 0 0 0 0 0 1 0\"/>\r\n      </filter>\r\n    `;\r\n      document.body.appendChild(svg);\r\n  }\r\n\r\n  const applyColorBlindness = (type) => {\r\n      injectSVGFilters();\r\n      const filter = FILTERS[type] || '';\r\n      document.documentElement.style.filter = filter;\r\n  };\r\n\r\n  const resetColorBlindness = () => {\r\n      document.documentElement.style.filter = '';\r\n  };\n\n  function getFilter(level) {\r\n      // level: 0-100\r\n      const sepia = (level / 100) * 0.6; // max 0.6 sepia\r\n      const hue = -20 * (level / 100);   // max -20deg\r\n      const brightness = 1 - (level / 100) * 0.1; // min 0.9\r\n      return `brightness(${brightness}) sepia(${sepia}) hue-rotate(${hue}deg)`;\r\n  }\r\n\r\n  const enableBlueLightFilter = (level = 50) => {\r\n      document.documentElement.style.filter = getFilter(level);\r\n  };\r\n\r\n  const disableBlueLightFilter = () => {\r\n      document.documentElement.style.filter = '';\r\n  };\n\n  let isDarkMode = false;\r\n\r\n  const toggleNightMode = () => {\r\n      isDarkMode = !isDarkMode;\r\n      if (isDarkMode) {\r\n          sap.ui.getCore().applyTheme(\"sap_horizon_dark\");\r\n      } else {\r\n          sap.ui.getCore().applyTheme(\"sap_horizon\");\r\n      }\r\n      return isDarkMode;\r\n  };\r\n\r\n  const disableNightMode = () => {\r\n      if (isDarkMode) {\r\n          sap.ui.getCore().applyTheme(\"sap_horizon\");\r\n          isDarkMode = false;\r\n      }\r\n  };\n\n  const STORAGE_KEY = \"eye-able-images-hidden\";\r\n\r\n  let imagesHidden = false;\r\n  let observer = null;\r\n\r\n  function setVisibilityAll(selector, value) {\r\n      document.querySelectorAll(selector).forEach(el => el.style.visibility = value);\r\n  }\r\n\r\n  function setVisibilityBackgroundImage(value) {\r\n      document.querySelectorAll('[style*=\"background-image\"]').forEach(el => el.style.visibility = value);\r\n  }\r\n\r\n  function setVisibilityInShadowRoots(value) {\r\n      document.querySelectorAll('*').forEach(el => {\r\n          if (el.shadowRoot) {\r\n              // img, svg, UI5 icon, avatar, illustrated message, button icon\r\n              el.shadowRoot.querySelectorAll('img,svg,.sapUiIcon,.sapMImg,.sapMBtnIcon,.sapFAvatar,.sapMIllustratedMessage-illu').forEach(shEl => shEl.style.visibility = value);\r\n              // background-image\r\n              el.shadowRoot.querySelectorAll('[style*=\"background-image\"]').forEach(shEl => shEl.style.visibility = value);\r\n          }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Sayfadaki tüm resimleri gizler veya gösterir.\r\n   * <body> etiketine bir CSS sınıfı ekleyip kaldırarak çalışır.\r\n   */\r\n  const toggleImages = () => {\r\n      imagesHidden = !imagesHidden;\r\n      if (imagesHidden) {\r\n          hideImages();\r\n          startImageObserver();\r\n      } else {\r\n          showImages();\r\n          stopImageObserver();\r\n      }\r\n      localStorage.setItem(STORAGE_KEY, imagesHidden);\r\n      console.log(`Images are now ${imagesHidden ? 'hidden' : 'visible'}.`);\r\n      return imagesHidden;\r\n  };\r\n\r\n  const hideImages = () => {\r\n      setVisibilityAll('img', 'hidden');\r\n      setVisibilityAll('svg', 'hidden');\r\n      setVisibilityAll('.sapMImg', 'hidden');\r\n      setVisibilityAll('.sapMBtnIcon', 'hidden');\r\n      setVisibilityAll('.sapUiIcon', 'hidden');\r\n      setVisibilityAll('.sapFAvatar', 'hidden');\r\n      setVisibilityAll('.sapMIllustratedMessage-illu', 'hidden');\r\n      setVisibilityBackgroundImage('hidden');\r\n      setVisibilityInShadowRoots('hidden');\r\n  };\r\n\r\n  const showImages = () => {\r\n      setVisibilityAll('img', '');\r\n      setVisibilityAll('svg', '');\r\n      setVisibilityAll('.sapMImg', '');\r\n      setVisibilityAll('.sapMBtnIcon', '');\r\n      setVisibilityAll('.sapUiIcon', '');\r\n      setVisibilityAll('.sapFAvatar', '');\r\n      setVisibilityAll('.sapMIllustratedMessage-illu', '');\r\n      setVisibilityBackgroundImage('');\r\n      setVisibilityInShadowRoots('');\r\n  };\r\n\r\n  const startImageObserver = () => {\r\n      if (observer) return;\r\n      observer = new MutationObserver(() => {\r\n          if (imagesHidden) hideImages();\r\n      });\r\n      observer.observe(document.body, { childList: true, subtree: true });\r\n  };\r\n\r\n  const stopImageObserver = () => {\r\n      if (observer) observer.disconnect();\r\n      observer = null;\r\n  };\n\n  // ts/js/contrast.js (YENİ DOSYA)\r\n\r\n  let contrastActive = false;\r\n\r\n  const toggleContrastMode = () => {\r\n      contrastActive = !contrastActive;\r\n      if (contrastActive) {\r\n          document.body.style.filter = 'invert(1) grayscale(1)';\r\n          document.body.style.backgroundColor = '#000';\r\n          document.body.style.color = '#fff';\r\n      } else {\r\n          document.body.style.filter = '';\r\n          document.body.style.backgroundColor = '';\r\n          document.body.style.color = '';\r\n      }\r\n      return contrastActive;\r\n  };\r\n\r\n  const isContrastModeActive = () => contrastActive;\n\n  const resetAll = () => {\r\n      onResetFontSize();\r\n      stopReading();\r\n      setTTSRate(1);\r\n      setTTSVolume(1);\r\n      disableHoverRead();\r\n      resetColorBlindness();\r\n      disableBlueLightFilter();\r\n      disableNightMode();\r\n      showImages();\r\n      if (isContrastModeActive()) toggleContrastMode();\r\n  };\n\n  const oSettingsModel = new JSONModel({\n      fontStep: 0,\n      ttsRate: 1,\n      ttsVolume: 1,\n      ttsHover: false,\n      colorBlindnessType: 'none',\n      blueLightFilterLevel: 50,\n      blueLightFilterActive: false,\n      fontSizeExpanded: false,\n      ttsExpanded: false,\n      colorBlindnessExpanded: false,\n      blaufilterExpanded: false,\n      nightModeActive: false,\n      toggleImagesActive: false,\n      contrastModeActive: false,\n      contrastModeExpanded: false,\n      contrastBgColor: \"#000000\",\n      contrastTextColor: \"#FFFFFF\",\n      contrastRatio: \"21:1\",\n      contrastReadable: \"LESBAR?\",\n      contrastUnderlineLinks: true\n  });\n\n  const popoverInternalController = {\n      onFontSizeToolbarPress: function() {\n          const expanded = oSettingsModel.getProperty(\"/fontSizeExpanded\");\n          oSettingsModel.setProperty(\"/fontSizeExpanded\", !expanded);\n      },\n      onTTSToolbarPress: function() {\n          const expanded = oSettingsModel.getProperty(\"/ttsExpanded\");\n          oSettingsModel.setProperty(\"/ttsExpanded\", !expanded);\n      },\n      onColorBlindnessToolbarPress: function() {\n          const expanded = oSettingsModel.getProperty(\"/colorBlindnessExpanded\");\n          oSettingsModel.setProperty(\"/colorBlindnessExpanded\", !expanded);\n      },\n      onBlaufilterToolbarPress: function() {\n          const expanded = oSettingsModel.getProperty(\"/blaufilterExpanded\");\n          oSettingsModel.setProperty(\"/blaufilterExpanded\", !expanded);\n          if (!expanded) {\n              enableBlueLightFilter(oSettingsModel.getProperty(\"/blueLightFilterLevel\"));\n              oSettingsModel.setProperty(\"/blueLightFilterActive\", true);\n          } else {\n              disableBlueLightFilter();\n              oSettingsModel.setProperty(\"/blueLightFilterActive\", false);\n          }\n      },\n      onNightModeToolbarPress: function() {\n          const active = toggleNightMode();\n          oSettingsModel.setProperty(\"/nightModeActive\", active);\n      },\n      onToggleImagesToolbarPress: function() {\n          const active = toggleImages();\n          oSettingsModel.setProperty(\"/toggleImagesActive\", active);\n      },\n      onContrastModeToolbarPress: function() {\n          const active = toggleContrastMode();\n          oSettingsModel.setProperty(\"/contrastModeActive\", active);\n      },\n      onResetAllToolbarPress: function() {\n          resetAll();\n          oSettingsModel.setProperty(\"/fontStep\", 0);\n          oSettingsModel.setProperty(\"/ttsRate\", 1);\n          oSettingsModel.setProperty(\"/ttsVolume\", 1);\n          oSettingsModel.setProperty(\"/ttsHover\", false);\n          oSettingsModel.setProperty(\"/colorBlindnessType\", 'none');\n          oSettingsModel.setProperty(\"/blueLightFilterLevel\", 50);\n          oSettingsModel.setProperty(\"/blueLightFilterActive\", false);\n          oSettingsModel.setProperty(\"/fontSizeExpanded\", false);\n          oSettingsModel.setProperty(\"/ttsExpanded\", false);\n          oSettingsModel.setProperty(\"/colorBlindnessExpanded\", false);\n          oSettingsModel.setProperty(\"/blaufilterExpanded\", false);\n          oSettingsModel.setProperty(\"/nightModeActive\", false);\n          oSettingsModel.setProperty(\"/toggleImagesActive\", false);\n          oSettingsModel.setProperty(\"/contrastModeActive\", false);\n      },\n      onContrastPresetPress: function(oEvent) {\n          const key = oEvent.getSource().getCustomData()[0].getValue();\n          let bg = \"#000000\", text = \"#FFFFFF\";\n          if (key === \"black-white\") { bg = \"#000000\"; text = \"#FFFFFF\"; }\n          if (key === \"yellow-black\") { bg = \"#FFFF00\"; text = \"#000000\"; }\n          if (key === \"red-black\") { bg = \"#FF0000\"; text = \"#000000\"; }\n          if (key === \"green-black\") { bg = \"#00FF00\"; text = \"#000000\"; }\n          oSettingsModel.setProperty(\"/contrastBgColor\", bg);\n          oSettingsModel.setProperty(\"/contrastTextColor\", text);\n          updateContrastPreview();\n      },\n      onBgColorPickerOpen: function() {\n          alert(\"Renk seçici (arka plan) açılacak - demo\");\n      },\n      onTextColorPickerOpen: function() {\n          alert(\"Renk seçici (yazı) açılacak - demo\");\n      },\n      onAdvancedColorPickerOpen: function() {\n          // TODO: Gelişmiş renk seçici aç\n          alert(\"Gelişmiş renk seçici açılacak - demo\");\n      },\n      onContrastApply: function() {\n          // Seçili renkleri tüm DOM'a uygula\n          applyContrastToDOM(\n              oSettingsModel.getProperty(\"/contrastBgColor\"),\n              oSettingsModel.getProperty(\"/contrastTextColor\"),\n              oSettingsModel.getProperty(\"/contrastUnderlineLinks\")\n          );\n          oSettingsModel.setProperty(\"/contrastModeActive\", true);\n      },\n      onContrastReset: function() {\n          // Kontrast ayarlarını sıfırla\n          removeContrastFromDOM();\n          oSettingsModel.setProperty(\"/contrastBgColor\", \"#000000\");\n          oSettingsModel.setProperty(\"/contrastTextColor\", \"#FFFFFF\");\n          oSettingsModel.setProperty(\"/contrastUnderlineLinks\", true);\n          oSettingsModel.setProperty(\"/contrastModeActive\", false);\n          updateContrastPreview();\n      },\n      onContrastCancel: function() {\n          // Paneli kapat veya değişiklikleri geri al\n          // (Burada sadece paneli kapatmak için bir örnek, gerçek uygulamada popup referansı ile kapatılabilir)\n          alert(\"İptal edildi - panel kapatılacak\");\n      },\n      onUnderlineLinksToggle: function(oEvent) {\n          oSettingsModel.setProperty(\"/contrastUnderlineLinks\", oEvent.getParameter(\"selected\"));\n          updateContrastPreview();\n      },\n      onPopoverClosePress: function(oEvent) {\n          // Popover'u kapat\n          let oPopover = oEvent.getSource().getParent();\n          while (oPopover && !(oPopover.isA && oPopover.isA(\"sap.m.Popover\"))) {\n              oPopover = oPopover.getParent && oPopover.getParent();\n          }\n          if (oPopover && oPopover.close) {\n              oPopover.close();\n          }\n      }\n  };\n\n  const openPopover = async (controller, oEvent) => {\n      const oView = controller.getView();\n      const sFragmentId = oView.getId();\n\n      if (!controller._pPopover) {\n          loadCustomStyleOnce();\n          initFontSizer(oSettingsModel);\n          initTextToSpeech(oSettingsModel);\n\n          controller._pPopover = Fragment.load({\n              id: sFragmentId,\n              name: \"new-npm-package.Popover\",\n              controller: popoverInternalController\n          }).then((oPopover) => {\n              oView.addDependent(oPopover);\n\n              oPopover.setModel(oSettingsModel, \"settings\");\n\n              const closeButton = Fragment.byId(sFragmentId, \"closePopoverButton\");\n              const increaseButton = Fragment.byId(sFragmentId, \"increaseFontButton\");\n              const decreaseButton = Fragment.byId(sFragmentId, \"decreaseFontButton\");\n              const resetButton = Fragment.byId(sFragmentId, \"resetFontButton\");\n\n              closeButton?.attachPress(() => oPopover.close());\n              increaseButton?.attachPress(onIncreaseFontSize);\n              decreaseButton?.attachPress(onDecreaseFontSize);\n              resetButton?.attachPress(onResetFontSize);\n\n              // TTS Kontrolleri\n              const ttsStartButton = Fragment.byId(sFragmentId, \"ttsStartButton\");\n              const ttsStopButton = Fragment.byId(sFragmentId, \"ttsStopButton\");\n              const ttsRateSlider = Fragment.byId(sFragmentId, \"ttsRateSlider\");\n              const ttsVolumeSlider = Fragment.byId(sFragmentId, \"ttsVolumeSlider\");\n              const ttsHoverSwitch = Fragment.byId(sFragmentId, \"ttsHoverSwitch\");\n\n              ttsStartButton?.attachPress(startReading);\n              ttsStopButton?.attachPress(stopReading);\n              ttsRateSlider?.attachChange((e) => setTTSRate(e.getParameter(\"value\")));\n              ttsVolumeSlider?.attachChange((e) => setTTSVolume(e.getParameter(\"value\")));\n              ttsHoverSwitch?.attachChange((e) => {\n                  const active = e.getParameter(\"state\");\n                  oSettingsModel.setProperty(\"/ttsHover\", active);\n                  if (active) enableHoverRead(); else disableHoverRead();\n              });\n\n              // Color Blindness Kontrolleri\n              const colorBlindnessSelect = Fragment.byId(sFragmentId, \"colorBlindnessSelect\");\n              const colorBlindnessResetButton = Fragment.byId(sFragmentId, \"colorBlindnessResetButton\");\n              colorBlindnessSelect?.attachChange((e) => {\n                  const type = e.getParameter(\"selectedItem\").getKey();\n                  oSettingsModel.setProperty(\"/colorBlindnessType\", type);\n                  applyColorBlindness(type);\n              });\n              colorBlindnessResetButton?.attachPress(() => {\n                  oSettingsModel.setProperty(\"/colorBlindnessType\", \"none\");\n                  resetColorBlindness();\n              });\n\n              // Blue Light Filter Kontrolleri\n              const blueLightFilterSlider = Fragment.byId(sFragmentId, \"blueLightFilterSlider\");\n              const blueLightFilterResetButton = Fragment.byId(sFragmentId, \"blueLightFilterResetButton\");\n              blueLightFilterSlider?.attachChange((e) => {\n                  const level = e.getParameter(\"value\");\n                  oSettingsModel.setProperty(\"/blueLightFilterLevel\", level);\n                  enableBlueLightFilter(level);\n              });\n              blueLightFilterResetButton?.attachPress(() => {\n                  oSettingsModel.setProperty(\"/blueLightFilterLevel\", 0);\n                  disableBlueLightFilter();\n              });\n\n              // Blue Light Filter Header Butonu\n              const blueLightFilterHeaderButton = Fragment.byId(sFragmentId, \"blueLightFilterHeaderButton\");\n              blueLightFilterHeaderButton?.attachPress(() => {\n                  const active = oSettingsModel.getProperty(\"/blueLightFilterActive\");\n                  if (!active) {\n                      enableBlueLightFilter(oSettingsModel.getProperty(\"/blueLightFilterLevel\"));\n                  } else {\n                      disableBlueLightFilter();\n                  }\n                  oSettingsModel.setProperty(\"/blueLightFilterActive\", !active);\n              });\n\n              // Panel header'ına tıklanınca paneli aç/kapat ve filtreyi tetikle\n              oPopover.onPanelHeaderPress = function(oEvent) {\n                  const context = oEvent.getSource().getBindingContext(\"modules\");\n                  if (context) {\n                      const name = context.getProperty(\"name\");\n                      const expanded = context.getProperty(\"expanded\");\n                      // Tüm modüller için expanded toggle\n                      context.getModel().setProperty(context.getPath() + \"/expanded\", !expanded);\n                      // Sadece Blaufilter aktivieren için filtreyi tetikle\n                      if (name === \"Blaufilter aktivieren\") {\n                          if (!expanded) {\n                              // Panel açılıyor\n                              const level = oSettingsModel.getProperty(\"/blueLightFilterLevel\");\n                              enableBlueLightFilter(level);\n                          } else {\n                              // Panel kapanıyor\n                              disableBlueLightFilter();\n                          }\n                      }\n                  }\n              };\n\n              return oPopover;\n          });\n      }\n\n      const oPopover = await controller._pPopover;\n\n      oPopover.setModel(new JSONModel({ items: popoverModules }), \"modules\");\n      oPopover.openBy(oEvent.getSource());\n  };\n\n  // Yardımcı fonksiyonlar\n  function updateContrastPreview() {\n      const bg = oSettingsModel.getProperty(\"/contrastBgColor\");\n      const text = oSettingsModel.getProperty(\"/contrastTextColor\");\n      const ratio = getContrastRatio(bg, text);\n      oSettingsModel.setProperty(\"/contrastRatio\", ratio.ratioText);\n      oSettingsModel.setProperty(\"/contrastReadable\", ratio.readable ? \"LESBAR\" : \"NICHT LESBAR\");\n  }\n  function getContrastRatio(bg, text) {\n      // Basit kontrast oranı hesaplama (WCAG)\n      function luminance(hex) {\n          let c = hex.replace('#', '');\n          if (c.length === 3) c = c.split('').map(x => x + x).join('');\n          const rgb = [0, 1, 2].map(i => parseInt(c.substr(i * 2, 2), 16) / 255);\n          const lum = rgb.map(v => v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4));\n          return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n      }\n      const l1 = luminance(bg);\n      const l2 = luminance(text);\n      const ratio = (Math.max(l1, l2) + 0.05) / (Math.min(l1, l2) + 0.05);\n      return { ratioText: ratio.toFixed(1) + \":1\", readable: ratio >= 4.5 };\n  }\n  function applyContrastToDOM(bg, text, underlineLinks) {\n      // TODO: Tüm body ve metinlere seçili renkleri uygula, linklerin altını çiz\n      document.body.style.backgroundColor = bg;\n      document.body.style.color = text;\n      // Link altı çizgisi\n      Array.from(document.querySelectorAll('a')).forEach(a => {\n          a.style.textDecoration = underlineLinks ? 'underline' : 'none';\n          a.style.color = text;\n      });\n  }\n  function removeContrastFromDOM() {\n      // TODO: Uygulanan stilleri kaldır\n      document.body.style.backgroundColor = '';\n      document.body.style.color = '';\n      Array.from(document.querySelectorAll('a')).forEach(a => {\n          a.style.textDecoration = '';\n          a.style.color = '';\n      });\n  }\n\n  const __esModule = true ;\n\n  exports.__esModule = __esModule;\n  exports.openPopover = openPopover;\n\n}));\n",
      "relatedPaths": [
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\popoverModules.js",
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\js\\cssLoader.js",
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\js\\fontsize.js",
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\js\\textToSpeech.js",
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\js\\colorBlindness.js",
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\js\\blueLightFilter.js",
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\js\\nightMode.js",
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\js\\imageHider.js",
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\js\\contrast.js",
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\js\\resetAll.js",
        "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\index.js"
      ],
      "imports": [
        "sap/ui/model/json/JSONModel",
        "sap/ui/core/Fragment"
      ],
      "dynamicImports": [],
      "generated": false,
      "isWebComponent": false,
      "isEntryPoint": true
    },
    {
      "name": "new-npm-package/css/style.css",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\css\\style.css",
      "code": "@import \"./fontsize.css\";\r\n\r\n.myCustomPopover * {\r\n  border: 0 0 0 1px solid rgba(0, 57, 133, 0.863);\r\n  border-radius: 0 !important;\r\n  box-shadow: none;\r\n  background-color: whitesmoke;\r\n  color: rgba(0, 57, 133, 0.863);\r\n  \r\n\r\n}\r\n\r\n.myCustomPopover {\r\n  border-radius: 3px !important;\r\n}\r\n\r\n.myCustomPopover .sapMPopoverWrapper{\r\n  border-radius: 3px !important;\r\n}\r\n\r\n.myCustomPopover .sapMPanel.resetAllPanel .sapMTB.sapMTBStandard{\r\n  border: 0 !important;\r\n}\r\n\r\n.myCustomPopover .sapMPanelContent .sapMBtnInner .sapUiIcon {\r\n  border:0 !important;\r\n  border-radius: 7px !important;\r\n\r\n}\r\n.myCustomPopover .sapMPanelContent .sapMBtnInner {\r\n  border: 1px solid rgba(0, 57, 133, 0.863) !important;\r\n  border-radius: 7px !important;\r\n}\r\n\r\n.myCustomPopover .sapMTitle.popoverTitle {\r\n  font-weight: bolder;\r\n}\r\n\r\n.myCustomPopover .sapMPanelContent .sapMSlt {\r\n  border: 1px solid rgba(0, 57, 133, 0.863) !important;\r\n  border-radius: 7px !important;\r\n}\r\n\r\n.myCustomPopover .sapMPanel .sapMTB.sapMPanelHeaderTB {\r\n  background-color: whitesmoke;\r\n  color: rgba(0, 57, 133, 0.863);\r\n}\r\n\r\n.myCustomPopover .sapMPanel .sapMTB.sapMPanelHeaderTB .sapMTitle,\r\n.myCustomPopover .sapMPanel .sapMTB.sapMPanelHeaderTB .sapUiIcon {\r\n  color: rgba(0, 57, 133, 0.863);\r\n  background-color: whitesmoke;\r\n\r\n}\r\n\r\n.myCustomPopover .sapMPanelContent {\r\n  padding: 3px;\r\n}\r\n\r\n.myCustomPopover .sapMTitle {\r\n  font-weight: normal;\r\n  font-family: auto;\r\n  font-size: 1.2rem;\r\n}\r\n\r\n.myCustomPopover .sapMSliderProgress, .myCustomPopover .sapMSliderInner {\r\n  background-color: rgba(0, 57, 133, 0.863);\r\n}\r\n\r\n.myCustomPopover .sapMSwtLabel{\r\n  background-color: rgba(0, 57, 133, 0.863);\r\n  color: whitesmoke;\r\n  border-radius: 7px !important;\r\n}\r\n\r\n.myCustomPopover .sapMSwt {\r\n  border-radius: 7px !important;\r\n  border: 0 !important;\r\n}\r\n\r\n.myCustomPopover .sapMSwtInner .sapMSwtHandle{\r\n  background-color: rgba(0, 57, 133, 0.863);\r\n  border-radius: 7px !important;\r\n  border: 0 !important;\r\n}\r\n\r\n.myCustomPopover .sapMSwtText{\r\n  border-radius: 7px !important;\r\n  border: 0 !important;\r\n}\r\n\r\n.sapMPopoverHeader .sapMBarContainer *, .sapMPopoverHeader .sapMBarContainer{\r\n  background-color: rgb(39, 39, 134);\r\n  color: whitesmoke;\r\n\r\n}\r\n\r\n.sapMPopoverHeader .sapMBtnIcon {\r\n  color: whitesmoke !important;\r\n}",
      "type": "resource"
    },
    {
      "name": "new-npm-package/Popover.fragment.xml",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\Popover.fragment.xml",
      "code": "<core:FragmentDefinition\r\n    xmlns=\"sap.m\"\r\n    xmlns:core=\"sap.ui.core\"\r\n>\r\n    <Popover\r\n        class=\"myCustomPopover\"\r\n        id=\"npmPopover\"\r\n        placement=\"Bottom\"\r\n        title=\"Eye Able Assistent\"\r\n        contentWidth=\"300px\"\r\n    >\r\n        <customHeader>\r\n            <Bar>\r\n                <contentMiddle>\r\n                    <Title text=\"Accessibility Assistent\" class=\"popoverTitle\" />\r\n                </contentMiddle>\r\n                <contentRight>\r\n                    <Button icon=\"sap-icon://notification\" press=\".onPopoverClosePress\" tooltip=\"Schließen\" class=\"closePopoverButton\"/>\r\n                </contentRight>\r\n            </Bar>\r\n        </customHeader>\r\n        <content>\r\n            <core:Fragment\r\n                fragmentName=\"new-npm-package.fragments.FontSizePanel\"\r\n                type=\"XML\"\r\n            />\r\n            <core:Fragment\r\n                fragmentName=\"new-npm-package.fragments.TTSSpeechPanel\"\r\n                type=\"XML\"\r\n            />\r\n            <core:Fragment\r\n                fragmentName=\"new-npm-package.fragments.ColorBlindnessPanel\"\r\n                type=\"XML\"\r\n            />\r\n            <core:Fragment\r\n                fragmentName=\"new-npm-package.fragments.BlaufilterPanel\"\r\n                type=\"XML\"\r\n            />\r\n            <core:Fragment\r\n                fragmentName=\"new-npm-package.fragments.NightModePanel\"\r\n                type=\"XML\"\r\n            />\r\n            <core:Fragment\r\n                fragmentName=\"new-npm-package.fragments.ToggleImagesPanel\"\r\n                type=\"XML\"\r\n            />\r\n            <core:Fragment\r\n                fragmentName=\"new-npm-package.fragments.ContrastModePanel\"\r\n                type=\"XML\"\r\n            />\r\n            <core:Fragment\r\n                fragmentName=\"new-npm-package.fragments.ResetAllPanel\"\r\n                type=\"XML\"\r\n            />\r\n        </content>\r\n    </Popover>\r\n</core:FragmentDefinition>\r\n",
      "type": "resource"
    },
    {
      "name": "new-npm-package/fragments/FontSizePanel.fragment.xml",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\fragments\\FontSizePanel.fragment.xml",
      "code": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\r\n   <Panel id=\"fontSizePanel\" expandable=\"true\" expanded=\"{settings>/fontSizeExpanded}\" width=\"auto\" class=\"fontSizePanel\">\r\n      <headerToolbar>\r\n         <OverflowToolbar active=\"true\" press=\"onFontSizeToolbarPress\">\r\n          <core:Icon src=\"sap-icon://text\" size=\"20px\" />\r\n          <Title text=\"Schriftgröße\"/>\r\n         </OverflowToolbar>\r\n      </headerToolbar>\r\n      <content>\r\n         <VBox justifyContent=\"Center\" alignItems=\"Center\" width=\"100%\">\r\n            <Button id=\"fontStepInput\" text=\"{settings>/fontStep}\" width=\"150px\"/>\r\n            <HBox alignItems=\"Center\" width=\"150px\" justifyContent=\"SpaceBetween\">\r\n               <Button id=\"decreaseFontButton\" icon=\"sap-icon://less\" />\r\n               <Button id=\"resetFontButton\" icon=\"sap-icon://refresh\" />\r\n               <Button id=\"increaseFontButton\" icon=\"sap-icon://add\" />\r\n            </HBox>\r\n         </VBox>\r\n      </content>\r\n   </Panel>\r\n</core:FragmentDefinition> ",
      "type": "resource"
    },
    {
      "name": "new-npm-package/fragments/TTSSpeechPanel.fragment.xml",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\fragments\\TTSSpeechPanel.fragment.xml",
      "code": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\r\n   <Panel id=\"ttsPanel\" expandable=\"true\" expanded=\"{settings>/ttsExpanded}\" width=\"auto\" class=\"ttsPanel\">\r\n      <headerToolbar>\r\n         <OverflowToolbar active=\"true\" press=\"onTTSToolbarPress\">\r\n            <core:Icon src=\"sap-icon://microphone\" size=\"20px\" />\r\n            <Title text=\"Webseite vorlesen\" />\r\n         </OverflowToolbar>\r\n      </headerToolbar>\r\n      <content>\r\n         <VBox justifyContent=\"Center\" alignItems=\"Center\" width=\"100%\">\r\n            <HBox alignItems=\"Center\" width=\"200px\" justifyContent=\"SpaceBetween\">\r\n               <Button id=\"ttsStartButton\" text=\"Vorlesen\" icon=\"sap-icon://begin\"/>\r\n               <Button id=\"ttsStopButton\" text=\"Stopp\" icon=\"sap-icon://stop\"/>\r\n            </HBox>\r\n            <VBox alignItems=\"Center\" width=\"100%\" justifyContent=\"SpaceBetween\" >\r\n               <Label text=\"Geschwindigkeit\" labelFor=\"ttsRateSlider\"/>\r\n               <Slider id=\"ttsRateSlider\" min=\"0.5\" max=\"2\" step=\"0.1\" value=\"{settings>/ttsRate}\" width=\"200px\"/>\r\n            </VBox>\r\n            <VBox alignItems=\"Center\" width=\"100%\" justifyContent=\"SpaceBetween\">\r\n               <Label text=\"Lautstärke\" labelFor=\"ttsVolumeSlider\"/>\r\n               <Slider id=\"ttsVolumeSlider\" min=\"0\" max=\"1\" step=\"0.1\" value=\"{settings>/ttsVolume}\" width=\"200px\"/>\r\n            </VBox>\r\n            <HBox alignItems=\"Center\" width=\"200px\" justifyContent=\"SpaceBetween\">\r\n               <Label text=\"Hover-Lesen\" labelFor=\"ttsHoverSwitch\"/>\r\n               <Switch id=\"ttsHoverSwitch\" state=\"{settings>/ttsHover}\"/>\r\n            </HBox>\r\n         </VBox>\r\n      </content>\r\n   </Panel>\r\n</core:FragmentDefinition> ",
      "type": "resource"
    },
    {
      "name": "new-npm-package/fragments/ColorBlindnessPanel.fragment.xml",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\fragments\\ColorBlindnessPanel.fragment.xml",
      "code": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\r\n   <Panel id=\"colorBlindnessPanel\" expandable=\"true\" expanded=\"{settings>/colorBlindnessExpanded}\" width=\"auto\" class=\"colorBlindnessPanel\">\r\n      <headerToolbar>\r\n         <OverflowToolbar active=\"true\" press=\"onColorBlindnessToolbarPress\">\r\n            <core:Icon src=\"sap-icon://palette\" size=\"20px\" />\r\n            <Title text=\"Farbschwäche\" />\r\n         </OverflowToolbar>\r\n      </headerToolbar>\r\n      <content>\r\n         <VBox visible=\"{settings>/colorBlindnessVisible}\" justifyContent=\"Center\" alignItems=\"Center\" width=\"100%\">\r\n            <HBox alignItems=\"Center\" width=\"200px\" justifyContent=\"SpaceBetween\">\r\n               <Select id=\"colorBlindnessSelect\" selectedKey=\"{settings>/colorBlindnessType}\" type=\"Default\">\r\n                  <items>\r\n                     <core:Item key=\"none\" text=\"Keine\" />\r\n                     <core:Item key=\"protanopia\" text=\"Protanopie\" />\r\n                     <core:Item key=\"deuteranopia\" text=\"Deuteranopie\" />\r\n                     <core:Item key=\"tritanopia\" text=\"Tritanopie\" />\r\n                     <core:Item key=\"achromatopsia\" text=\"Achromatopsie\" />\r\n                  </items>\r\n               </Select>\r\n               <Button id=\"colorBlindnessResetButton\"  icon=\"sap-icon://refresh\"/>\r\n\r\n            </HBox>\r\n         </VBox>\r\n      </content>\r\n   </Panel>\r\n</core:FragmentDefinition> ",
      "type": "resource"
    },
    {
      "name": "new-npm-package/fragments/BlaufilterPanel.fragment.xml",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\fragments\\BlaufilterPanel.fragment.xml",
      "code": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\r\n   <Panel id=\"blaufilterPanel\" expandable=\"true\" expanded=\"{settings>/blaufilterExpanded}\" width=\"auto\" class=\"blaufilterPanel\">\r\n      <headerToolbar>\r\n         <OverflowToolbar active=\"true\" press=\".onBlaufilterToolbarPress\">\r\n            <core:Icon src=\"sap-icon://light-mode\" size=\"20px\" />\r\n            <Title text=\"{= ${settings>/blaufilterExpanded} ? 'Blaufilter deaktivieren' : 'Blaufilter aktivieren'}\" />\r\n         </OverflowToolbar>\r\n      </headerToolbar>\r\n      <content>\r\n         <VBox justifyContent=\"Center\" alignItems=\"Center\" width=\"100%\">\r\n            <HBox alignItems=\"Center\" width=\"200px\" justifyContent=\"SpaceBetween\">\r\n               <Slider id=\"blueLightFilterSlider\" min=\"0\" max=\"100\" step=\"1\" value=\"{settings>/blueLightFilterLevel}\" width=\"150px\"/>\r\n               <Button id=\"blueLightFilterResetButton\" icon=\"sap-icon://refresh\"/>\r\n            </HBox>\r\n         </VBox>\r\n      </content>\r\n   </Panel>\r\n</core:FragmentDefinition> ",
      "type": "resource"
    },
    {
      "name": "new-npm-package/fragments/NightModePanel.fragment.xml",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\fragments\\NightModePanel.fragment.xml",
      "code": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\r\n   <Panel id=\"nightModePanel\" expandable=\"false\" width=\"auto\" class=\"nightModePanel\">\r\n      <headerToolbar>\r\n         <OverflowToolbar active=\"true\" press=\".onNightModeToolbarPress\">\r\n            <core:Icon src=\"sap-icon://dark-mode\" size=\"20px\" />\r\n            <Title text=\"{= ${settings>/nightModeActive} ? 'Nachtmodus deaktivieren' : 'Nachtmodus aktivieren' }\" />\r\n         </OverflowToolbar>\r\n      </headerToolbar>\r\n   </Panel>\r\n</core:FragmentDefinition> ",
      "type": "resource"
    },
    {
      "name": "new-npm-package/fragments/ToggleImagesPanel.fragment.xml",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\fragments\\ToggleImagesPanel.fragment.xml",
      "code": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\r\n   <Panel id=\"toggleImagesPanel\" expandable=\"false\" width=\"auto\" class=\"toggleImagesPanel\">\r\n      <headerToolbar>\r\n         <OverflowToolbar active=\"true\" press=\".onToggleImagesToolbarPress\">\r\n            <core:Icon src=\"sap-icon://background\" size=\"20px\" />\r\n            <Title text=\"{= ${settings>/toggleImagesActive} ? 'Bilder einblenden' : 'Bilder ausblenden' }\" />\r\n         </OverflowToolbar>\r\n      </headerToolbar>\r\n   </Panel>\r\n</core:FragmentDefinition> ",
      "type": "resource"
    },
    {
      "name": "new-npm-package/fragments/ContrastModePanel.fragment.xml",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\fragments\\ContrastModePanel.fragment.xml",
      "code": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\r\n    <Panel id=\"contrastModePanel\" expandable=\"false\" width=\"auto\" class=\"contrastModePanel\">\r\n        <headerToolbar>\r\n            <OverflowToolbar active=\"true\" press=\".onContrastModeToolbarPress\">\r\n                <core:Icon src=\"sap-icon://paint-bucket\" size=\"20px\" />\r\n                <Title text=\"{= ${settings>/contrastModeActive} ? 'Kontrastmodus deaktivieren' : 'Kontrastmodus aktivieren' }\" />\r\n            </OverflowToolbar>\r\n        </headerToolbar>\r\n    </Panel>\r\n</core:FragmentDefinition> ",
      "type": "resource"
    },
    {
      "name": "new-npm-package/fragments/ResetAllPanel.fragment.xml",
      "path": "C:\\Users\\UgurBiricik\\Desktop\\ts\\package\\fragments\\ResetAllPanel.fragment.xml",
      "code": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\r\n   <Panel id=\"resetAllPanel\" expandable=\"false\" width=\"auto\" class=\"resetAllPanel\">\r\n      <headerToolbar>\r\n         <OverflowToolbar active=\"true\" press=\".onResetAllToolbarPress\">\r\n            <core:Icon src=\"sap-icon://reset\" size=\"20px\" />\r\n            <Title text=\"Alles zurücksetzen\" />\r\n         </OverflowToolbar>\r\n      </headerToolbar>\r\n   </Panel>\r\n</core:FragmentDefinition> ",
      "type": "resource"
    }
  ]
}